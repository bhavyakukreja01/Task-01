{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNYXVCQMGhyMun43NDxPqoW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bhavyakukreja01/Task-01/blob/main/TASK_01\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uZlP2KudoYOg",
        "outputId": "26aea44b-06f3-42f3-8799-f5014bd88b05"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.12/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (2.0.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (3.10.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.12/dist-packages (0.13.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.12/dist-packages (1.6.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (4.59.2)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.4.9)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (25.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (11.3.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.16.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.5.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ],
      "source": [
        "# Install libraries (most are pre-installed on Colab)\n",
        "!pip install pandas numpy matplotlib seaborn scikit-learn\n",
        "\n",
        "# Import libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load Titanic dataset from seaborn\n",
        "df = sns.load_dataset(\"titanic\")\n",
        "\n",
        "# Show first few rows\n",
        "df.head()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "KHtPC30EosqR",
        "outputId": "8d88bcea-cc6e-48ae-c09a-0bb86e0e336e"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   survived  pclass     sex   age  sibsp  parch     fare embarked  class  \\\n",
              "0         0       3    male  22.0      1      0   7.2500        S  Third   \n",
              "1         1       1  female  38.0      1      0  71.2833        C  First   \n",
              "2         1       3  female  26.0      0      0   7.9250        S  Third   \n",
              "3         1       1  female  35.0      1      0  53.1000        S  First   \n",
              "4         0       3    male  35.0      0      0   8.0500        S  Third   \n",
              "\n",
              "     who  adult_male deck  embark_town alive  alone  \n",
              "0    man        True  NaN  Southampton    no  False  \n",
              "1  woman       False    C    Cherbourg   yes  False  \n",
              "2  woman       False  NaN  Southampton   yes   True  \n",
              "3  woman       False    C  Southampton   yes  False  \n",
              "4    man        True  NaN  Southampton    no   True  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-206358c2-1ca2-4ad1-9e4f-2754f864106d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>survived</th>\n",
              "      <th>pclass</th>\n",
              "      <th>sex</th>\n",
              "      <th>age</th>\n",
              "      <th>sibsp</th>\n",
              "      <th>parch</th>\n",
              "      <th>fare</th>\n",
              "      <th>embarked</th>\n",
              "      <th>class</th>\n",
              "      <th>who</th>\n",
              "      <th>adult_male</th>\n",
              "      <th>deck</th>\n",
              "      <th>embark_town</th>\n",
              "      <th>alive</th>\n",
              "      <th>alone</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "      <td>Third</td>\n",
              "      <td>man</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>no</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "      <td>First</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>C</td>\n",
              "      <td>Cherbourg</td>\n",
              "      <td>yes</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>Third</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>yes</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "      <td>First</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>C</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>yes</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>Third</td>\n",
              "      <td>man</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>no</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-206358c2-1ca2-4ad1-9e4f-2754f864106d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-206358c2-1ca2-4ad1-9e4f-2754f864106d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-206358c2-1ca2-4ad1-9e4f-2754f864106d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-296a1667-cda4-48fa-b2eb-5453d1f5b31e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-296a1667-cda4-48fa-b2eb-5453d1f5b31e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-296a1667-cda4-48fa-b2eb-5453d1f5b31e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334044,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Third\",\n          \"First\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"who\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"man\",\n          \"woman\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"adult_male\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"deck\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"C\",\n          \"E\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embark_town\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Southampton\",\n          \"Cherbourg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alive\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alone\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Basic info\n",
        "print(df.info())\n",
        "\n",
        "# Summary statistics\n",
        "print(df.describe(include='all'))\n",
        "\n",
        "# Check missing values\n",
        "print(df.isnull().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xz9V_2Eqo3bz",
        "outputId": "a83ef7bd-3a46-4fe6-cfe3-5e4a221e713a"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 15 columns):\n",
            " #   Column       Non-Null Count  Dtype   \n",
            "---  ------       --------------  -----   \n",
            " 0   survived     891 non-null    int64   \n",
            " 1   pclass       891 non-null    int64   \n",
            " 2   sex          891 non-null    object  \n",
            " 3   age          714 non-null    float64 \n",
            " 4   sibsp        891 non-null    int64   \n",
            " 5   parch        891 non-null    int64   \n",
            " 6   fare         891 non-null    float64 \n",
            " 7   embarked     889 non-null    object  \n",
            " 8   class        891 non-null    category\n",
            " 9   who          891 non-null    object  \n",
            " 10  adult_male   891 non-null    bool    \n",
            " 11  deck         203 non-null    category\n",
            " 12  embark_town  889 non-null    object  \n",
            " 13  alive        891 non-null    object  \n",
            " 14  alone        891 non-null    bool    \n",
            "dtypes: bool(2), category(2), float64(2), int64(4), object(5)\n",
            "memory usage: 80.7+ KB\n",
            "None\n",
            "          survived      pclass   sex         age       sibsp       parch  \\\n",
            "count   891.000000  891.000000   891  714.000000  891.000000  891.000000   \n",
            "unique         NaN         NaN     2         NaN         NaN         NaN   \n",
            "top            NaN         NaN  male         NaN         NaN         NaN   \n",
            "freq           NaN         NaN   577         NaN         NaN         NaN   \n",
            "mean      0.383838    2.308642   NaN   29.699118    0.523008    0.381594   \n",
            "std       0.486592    0.836071   NaN   14.526497    1.102743    0.806057   \n",
            "min       0.000000    1.000000   NaN    0.420000    0.000000    0.000000   \n",
            "25%       0.000000    2.000000   NaN   20.125000    0.000000    0.000000   \n",
            "50%       0.000000    3.000000   NaN   28.000000    0.000000    0.000000   \n",
            "75%       1.000000    3.000000   NaN   38.000000    1.000000    0.000000   \n",
            "max       1.000000    3.000000   NaN   80.000000    8.000000    6.000000   \n",
            "\n",
            "              fare embarked  class  who adult_male deck  embark_town alive  \\\n",
            "count   891.000000      889    891  891        891  203          889   891   \n",
            "unique         NaN        3      3    3          2    7            3     2   \n",
            "top            NaN        S  Third  man       True    C  Southampton    no   \n",
            "freq           NaN      644    491  537        537   59          644   549   \n",
            "mean     32.204208      NaN    NaN  NaN        NaN  NaN          NaN   NaN   \n",
            "std      49.693429      NaN    NaN  NaN        NaN  NaN          NaN   NaN   \n",
            "min       0.000000      NaN    NaN  NaN        NaN  NaN          NaN   NaN   \n",
            "25%       7.910400      NaN    NaN  NaN        NaN  NaN          NaN   NaN   \n",
            "50%      14.454200      NaN    NaN  NaN        NaN  NaN          NaN   NaN   \n",
            "75%      31.000000      NaN    NaN  NaN        NaN  NaN          NaN   NaN   \n",
            "max     512.329200      NaN    NaN  NaN        NaN  NaN          NaN   NaN   \n",
            "\n",
            "       alone  \n",
            "count    891  \n",
            "unique     2  \n",
            "top     True  \n",
            "freq     537  \n",
            "mean     NaN  \n",
            "std      NaN  \n",
            "min      NaN  \n",
            "25%      NaN  \n",
            "50%      NaN  \n",
            "75%      NaN  \n",
            "max      NaN  \n",
            "survived         0\n",
            "pclass           0\n",
            "sex              0\n",
            "age            177\n",
            "sibsp            0\n",
            "parch            0\n",
            "fare             0\n",
            "embarked         2\n",
            "class            0\n",
            "who              0\n",
            "adult_male       0\n",
            "deck           688\n",
            "embark_town      2\n",
            "alive            0\n",
            "alone            0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fill numeric columns with mean\n",
        "for col in df.select_dtypes(include=['float64','int64']).columns:\n",
        "    df[col] = df[col].fillna(df[col].mean())\n",
        "\n",
        "# Fill categorical columns with mode\n",
        "for col in df.select_dtypes(include=['object','category']).columns:\n",
        "    df[col] = df[col].fillna(df[col].mode()[0])\n"
      ],
      "metadata": {
        "id": "s4IHx04Po8Qj"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Label Encoding\n",
        "le = LabelEncoder()\n",
        "for col in df.select_dtypes(include=['object','category']).columns:\n",
        "    df[col] = le.fit_transform(df[col])\n"
      ],
      "metadata": {
        "id": "MXru5IW0o-8T"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Standardization (mean=0, std=1)\n",
        "scaler = StandardScaler()\n",
        "num_cols = df.select_dtypes(include=['float64','int64']).columns\n",
        "df[num_cols] = scaler.fit_transform(df[num_cols])\n"
      ],
      "metadata": {
        "id": "frffL2vtpDXb"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize boxplots\n",
        "for col in num_cols:\n",
        "    plt.figure(figsize=(6,3))\n",
        "    sns.boxplot(x=df[col])\n",
        "    plt.title(f\"Boxplot of {col}\")\n",
        "    plt.show()\n",
        "\n",
        "# Remove outliers using IQR method\n",
        "for col in num_cols:\n",
        "    Q1 = df[col].quantile(0.25)\n",
        "    Q3 = df[col].quantile(0.75)\n",
        "    IQR = Q3 - Q1\n",
        "    df = df[~((df[col] < (Q1 - 1.5 * IQR)) | (df[col] > (Q3 + 1.5 * IQR)))]\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Sc-U_ySQpGZM",
        "outputId": "912e2002-4950-483d-9cf9-d290cd8496aa"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "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v7+/y7YXnj7OyspyLvP09NQbb7yhzMxM5efna/78+SWGxs3NzSW0ktSsWTNJuuTHpn744QedPn1aERERF93XokULFRcX6+DBg1d/8v/vwvgvtd9jx47pxx9/LPV+LwgPD3e57efnpwYNGjjPc//+/ZKkVq1alXrfy5Yt0y233CJvb2/VqlVLdevW1Zw5c5Sbm+tc55577lGXLl00fPhwBQcH695779Xbb7/tEuxx48bJz89PUVFRCg8P16hRo1yeDgeqCiKNas3NzU09e/bU4cOHtXfv3jLtY9WqVZKkgoKCMu8DV/bJJ5+of//+8vb21quvvqoVK1YoJSVFgwcPdnkDno+Pj9avX681a9bo/vvv17Zt23TPPffo9ttvd76Zr0WLFtq9e7fefPNNde3aVe+99566du2qpKSkyjo9oEyINKq98+fPS5JOnTolSQoLC9OhQ4eUn5/vst6uXbuc91+wbds2TZkyRQ888IDatWun4cOHu1zVXVBcXKxvvvnGZdmePXsk6ZKfa65bt65q1qyp3bt3X3Tfrl275ObmptDQUElXfpr45y6M/1L7rVOnjnx9fa96f7/0y3+onDp1SocPH3aeZ9OmTSVJX3/9dan2+95778nb21urVq3Sgw8+qNjYWEVHR5e4rpubm3r16qUXXnhBO3bs0NSpU/XRRx9p3bp1znV8fX11zz33aP78+Tpw4ID69eunqVOnqqCgoFTjAioTkUa1du7cOa1evVqenp7Op7P79u2roqIivfzyyy7rzpw5Uw6HQ7Gxsc5tExISFBISolmzZik5OVnZ2dl69NFHSzzWz/dnjNHLL78sDw8P9erVq8T13d3d1bt3by1dutTlKfHs7GwtXLhQXbt2VUBAgCQ5o3ry5MkrnnODBg0UGRmpBQsWuKz/9ddfa/Xq1erbt+8V93E5r732ms6dO+e8PWfOHJ0/f945b71795a/v7+ef/75i4JoLvORNHd3dzkcDufVsPTTSwVLlixxWe/48eMXbRsZGSlJOnv2rCQpJyfH5X5PT0/ddNNNMsa4jB2wHR/BQrWycuVK5xXx0aNHtXDhQu3du1fjx493Bu/OO+9Uz5499eSTT+rbb79V27ZttXr1ai1dulSPPPKI80rw2Wef1datW7V27Vr5+/urTZs2euaZZ/TUU0/prrvucomdt7e3PvzwQ8XHx6tjx45auXKlli9frokTJ6pu3bqXHO+zzz7r/Mzvww8/rBo1amju3Lk6e/aspk2b5lwvMjJS7u7u+utf/6rc3Fx5eXnptttuU7169Urc7/Tp0xUbG6tOnTpp2LBhzo9gBQYG/s/fHV5YWKhevXrp7rvv1u7du/Xqq6+qa9eu6t+/vyQpICBAM2fO1PDhw9WhQwcNHjxY1113nb788kudPn1aCxYsKHG//fr10wsvvKA+ffpo8ODBOnr0qF555RXdeOON2rZtm3O9KVOmaP369erXr5/CwsJ09OhRvfrqq7rhhhvUtWtXST/9Q6F+/frq0qWLgoODtXPnTr388svq16/fRe9FAKxWqe8tB66Rkj6C5e3tbSIjI82cOXNcPvpjjDH5+fnm0UcfNSEhIcbDw8OEh4eb6dOnO9fbvHmzqVGjhsvHqowx5vz586ZDhw4mJCTEnDhxwhjz00eJfH19zf79+03v3r1NzZo1TXBwsElKSjJFRUUu2+sXH8EyxpgtW7aYmJgY4+fnZ2rWrGl69uxpNmzYcNE5zps3zzRp0sS4u7tf1cex1qxZY7p06WJ8fHxMQECAufPOO82OHTtc1inLR7A+/vhjk5iYaK677jrj5+dnhgwZ4vJRrws++OAD07lzZ+fxo6KizKJFi5z3l/QRrNdff92Eh4cbLy8v07x5czN//nyTlJRkfv5X1dq1a82AAQNMSEiI8fT0NCEhIWbQoEFmz549znXmzp1runXrZmrXrm28vLxM06ZNzRNPPGFyc3OveJ6ATRzGXMVXIgG4pISEBL377rvO17yrq+TkZD3wwAPatGmTy1evAig/vCYNAICliDQAAJYi0gAAWIrXpAEAsBRX0gAAWIpIAwBgqTJ/mUlxcbEOHTokf3//Un1lIQAAv3bGGOXn5yskJERubpe+Xi5zpA8dOuT8XmEAAFB6Bw8e1A033HDJ+8sc6QtfrXfw4EHn1y0CAIAry8vLU2ho6BW/prbMkb7wFHdAQACRBgCgDK70cjFvHAMAwFJEGgAASxFpAAAsRaQBALAUkQYAwFJEGgAASxFpAAAsRaQBALAUkQYAwFJEGgAASxFpAAAsRaQBALAUkQYAwFJEGgAASxFpAAAsRaQBALAUkQYAwFJEGgAASxFpAAAsVaOyBwCgfGRnZys3N7eyhwFUC4GBgQoODq7w4xJpoBrKzs7WffcP1bnCs5U9FKBacHNz16uvvqLmzZtX6HGJNFAN5ebm6lzhWZ1p0l3F3oGVPRygSnPP/U7e32/RwYMHiTSAa6fYO1DFvnUqexhAleZ25mTlHbvSjgwAAC6LSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCmrIl1QUKA9e/aooKCgsocCAMBPTJEk6dy5cxV+aKsifeDAASUmJurAgQOVPRQAACRJjsLTkqRjx45V+LGtijQAAPgvIg0AgKWINAAAliLSAABYikgDAGApIg0AgKWINAAAliLSAABYikgDAGApIg0AgKWINAAAliLSAABYikgDAGApIg0AgKWINAAAliLSAABYikgDAGApIg0AgKWINAAAliLSAABYikgDAGApIg0AgKWINAAAliLSAABYikgDAGApIg0AgKWINAAAliLSAABYikgDAGApIg0AgKWINAAAliLSAABYikgDAGApIg0AgKWINAAAliLSAABYikgDAGApIg0AgKWINAAAliLSAABYikgDAGApIg0AgKWINAAAliLSAABYqsbVrnj27FmdPXvWeTsvL69cBiRJWVlZ5bZv4NeA/4eA6uGqI/38889r8uTJ5TkWp6lTp1bIcQAAsNlVR3rChAl67LHHnLfz8vIUGhpaLoN68sknFRYWVi77Bn4NsrKy+McuUA1cdaS9vLzk5eVVnmNxCgsLU7NmzSrkWAAA2Io3jgEAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0AACWItIAAFiKSAMAYCkiDQCApYg0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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save to CSV\n",
        "df.to_csv(\"cleaned_titanic.csv\", index=False)\n",
        "\n",
        "# Download file\n",
        "from google.colab import files\n",
        "files.download(\"cleaned_titanic.csv\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "AdhbYNZXpKTN",
        "outputId": "f81e3862-82c1-473b-f7ac-9117f2b943fa"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_019d0571-7316-4dc4-ba68-4407899259d3\", \"cleaned_titanic.csv\", 70956)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}