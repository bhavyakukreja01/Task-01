{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM3GrDK0azl/+CnW8uF8LFY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bhavyakukreja01/Task-01/blob/main/Task_03\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 784
        },
        "id": "W8wt2x6Hhg2I",
        "outputId": "09c9927a-c4a3-481c-82d2-cb7b3b7c78fe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Feature    Target\n",
            "0  0.749080  6.334288\n",
            "1  1.901429  9.405278\n",
            "2  1.463988  8.483724\n",
            "3  1.197317  5.604382\n",
            "4  0.312037  4.716440\n",
            "Intercept (b0): [4.14291332]\n",
            "Coefficient (b1): [[2.79932366]]\n",
            "MAE: 0.5913425779189777\n",
            "MSE: 0.6536995137170021\n",
            "RÂ² Score: 0.8072059636181392\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Multiple Regression ---\n",
            "Intercept (b0): 9.914989558367084\n",
            "Coefficients (b1, b2, b3): [ 5.10589767  1.92460599 -2.31394075]\n",
            "MAE: 1.1043799150572822\n",
            "MSE: 2.017392480610302\n",
            "RÂ² Score: 0.6131872090733095\n"
          ]
        }
      ],
      "source": [
        "# ===============================\n",
        "# Linear Regression with Scikit-Learn\n",
        "# ===============================\n",
        "\n",
        "# 1. Import Libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# -------------------------------\n",
        "# 2. Create / Import Dataset\n",
        "# (For demo, weâll generate synthetic data)\n",
        "# -------------------------------\n",
        "\n",
        "# Simple regression data (1 feature)\n",
        "np.random.seed(42)\n",
        "X = 2 * np.random.rand(100, 1)   # Feature\n",
        "y = 4 + 3 * X + np.random.randn(100, 1)  # Target with some noise\n",
        "\n",
        "# Convert to DataFrame for easier handling\n",
        "df = pd.DataFrame({\"Feature\": X.flatten(), \"Target\": y.flatten()})\n",
        "print(df.head())\n",
        "\n",
        "# -------------------------------\n",
        "# 3. Train-Test Split\n",
        "# -------------------------------\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# -------------------------------\n",
        "# 4. Fit Linear Regression Model\n",
        "# -------------------------------\n",
        "lin_reg = LinearRegression()\n",
        "lin_reg.fit(X_train, y_train)\n",
        "\n",
        "print(\"Intercept (b0):\", lin_reg.intercept_)\n",
        "print(\"Coefficient (b1):\", lin_reg.coef_)\n",
        "\n",
        "# -------------------------------\n",
        "# 5. Predictions\n",
        "# -------------------------------\n",
        "y_pred = lin_reg.predict(X_test)\n",
        "\n",
        "# -------------------------------\n",
        "# 6. Model Evaluation\n",
        "# -------------------------------\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(\"MAE:\", mae)\n",
        "print(\"MSE:\", mse)\n",
        "print(\"RÂ² Score:\", r2)\n",
        "\n",
        "# -------------------------------\n",
        "# 7. Plot Regression Line\n",
        "# -------------------------------\n",
        "plt.scatter(X_test, y_test, color=\"blue\", label=\"Actual\")\n",
        "plt.plot(X_test, y_pred, color=\"red\", linewidth=2, label=\"Predicted\")\n",
        "plt.xlabel(\"Feature\")\n",
        "plt.ylabel(\"Target\")\n",
        "plt.title(\"Simple Linear Regression\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# =======================================================\n",
        "# MULTIPLE LINEAR REGRESSION EXAMPLE\n",
        "# =======================================================\n",
        "\n",
        "# Create synthetic multiple regression data\n",
        "np.random.seed(42)\n",
        "X_multi = np.random.rand(100, 3)  # 3 features\n",
        "coeffs = [5, 2, -3]\n",
        "y_multi = 10 + X_multi.dot(coeffs) + np.random.randn(100)\n",
        "\n",
        "# Split dataset\n",
        "X_train_m, X_test_m, y_train_m, y_test_m = train_test_split(\n",
        "    X_multi, y_multi, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# Train model\n",
        "multi_reg = LinearRegression()\n",
        "multi_reg.fit(X_train_m, y_train_m)\n",
        "\n",
        "print(\"\\n--- Multiple Regression ---\")\n",
        "print(\"Intercept (b0):\", multi_reg.intercept_)\n",
        "print(\"Coefficients (b1, b2, b3):\", multi_reg.coef_)\n",
        "\n",
        "# Predictions\n",
        "y_pred_m = multi_reg.predict(X_test_m)\n",
        "\n",
        "# Evaluation\n",
        "mae_m = mean_absolute_error(y_test_m, y_pred_m)\n",
        "mse_m = mean_squared_error(y_test_m, y_pred_m)\n",
        "r2_m = r2_score(y_test_m, y_pred_m)\n",
        "\n",
        "print(\"MAE:\", mae_m)\n",
        "print(\"MSE:\", mse_m)\n",
        "print(\"RÂ² Score:\", r2_m)\n"
      ]
    }
  ]
}